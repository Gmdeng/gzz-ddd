<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- 加载属性文件 -->
    <properties resource="config.properties">
        <!--properties中还可以配置一些属性名和属性值 -->
        <!-- <property name="jdbc.driver" value=""/> -->
    </properties>

    <!-- 全局配置参数，需要时再设置 -->
    <settings>
        <setting name="callSettersOnNulls" value="true" />
        <!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 -->
        <!-- 这个配置使全局的映射器启用或禁用缓存。系统默认值是true，设置只是为了展示出来 -->
        <setting name="cacheEnabled" value="true" />
        <!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。     系统默认值是true，设置只是为了展示出来 -->
        <setting name="lazyLoadingEnabled" value="true" />
        <setting name="aggressiveLazyLoading" value="true" />
        <!-- 允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动）。     系统默认值是true，设置只是为了展示出来 -->
        <setting name="multipleResultSetsEnabled" value="true" />
        <!--使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方    法来决定所使用的驱动。 系统默认值是true，设置只是为了展示出来 -->
        <setting name="useColumnLabel" value="true" />
        <!--允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true,则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如  Derby）。 系统默认值是false，设置只是为了展示出来 -->
        <setting name="useGeneratedKeys" value="false" />
        <setting name="autoMappingBehavior" value="PARTIAL" />
        <!--配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE     执行器重用预处理语句。BATCH 执行器重用语句和批量更新     系统默认值是SIMPLE，设置只是为了展示出来 -->
        <setting name="defaultExecutorType" value="SIMPLE" />
        <!-- 开启驼峰匹配 -->
        <setting name="mapUnderscoreToCamelCase" value="true" />
        <!-- 有多个SqlSession或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为Statement -->
        <setting name="localCacheScope" value="SESSION" />
        <setting name="jdbcTypeForNull" value="NULL" />
        <!-- 打印查询语句 -->
        <!-- SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING，可以根据自己的需要进行配置 -->
        <setting name="logImpl" value="STDOUT_LOGGING" />
    </settings>

    <!-- 类型命名 别名定义 -->
    <typeAliases>
        <!-- 针对单个别名定义 type：类型的路径 alias：别名，类名不能写错 别名可以随便起，但最好规范-->
        <!--<typeAlias type="bean.Apply" alias="apply" />-->
        <!-- 批量别名定义 指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以） -->
        <package name="com.gzz.retail.infra.persistence.pojo" />
    </typeAliases>

    <!-- 类型处理器-->
    <typeHandlers>

    </typeHandlers>

    <!--现拦截器的功能，使用到了动态代理，可以指定在某些操作时执行一些拦截操作-->
<!--    <plugins>-->
<!--        <plugin interceptor="com.gzz.boot.mybatis.autofill.AutoFillInterceptor">-->
<!--            <property name="someProperty" value="100"/>-->
<!--        </plugin>-->
<!--    </plugins>-->`

    <!--  环境,和spring整合后 environments配置将废除 -->
    <environments default="development">
        <environment id="development">
            <!-- 使用jdbc事务管理，事务控制由mybatis -->
            <transactionManager type="JDBC" />
            <!-- 数据库连接池，由mybatis管理 -->
            <dataSource type="POOLED">
                <!--配置连接数据库的4个基本信息-->
                <property name="driver" value="${jdbc.driver}" />
                <property name="url" value="${jdbc.url}" />
                <property name="username" value="${jdbc.username}" />
                <property name="password" value="${jdbc.password}" />
            </dataSource>
        </environment>
<!--        POOLED:每次被请求时简单打开和关闭连接-->
<!--        POOLED:JDBC 连接对象的数据源连接池的实现，用来避免创建新的连接实例时必要的初始连接和认证时间。-->
<!--        poolMaximumActiveConnections –  在任意时间存在的活动（也就是正在使用）连接的数量。默认值：10-->
<!--        poolMaximumIdleConnections –  任意时间存在的空闲连接数。-->
<!--        oolMaximumCheckoutTime –  在被强制返回之前，池中连接被检查的时间。默认值：20000 毫秒（也就是 20 秒）-->
<!--        poolTimeToWait  –  这是给连接池一个打印日志状态机会的低层次设置，还有重新尝试获得连接，这些情况下往往需要很长时间（为了避免连接池没有配置时静默失败）。 默认值：20000 毫秒（也就是 20 秒）-->
<!--        poolPingQuery –  发送到数据的侦测查询，用来验证连接是否正常工作，并且准备接受请求。默认是“NO PING QUERY SET”，这会引起许多数据库驱动连接由一个错误信 息而导致失败。-->
<!--        poolPingEnabled  –  这是开启或禁用侦测查询。如果开启，你必须用一个合法的SQL语句（最好是很快速的）设置 poolPingQuery 属性。默认值：false。-->
<!--        poolPingConnectionsNotUsedFor  –  这是用来配置 poolPingQuery 多次时间被用一次。这可以被设置匹配标准的数据库连接超时时间，来避免不必要的侦测。默认值：0 （也就是所有连接每一时刻都被侦测-但仅仅当 poolPingEnabled 为 true 时适用）。-->
<!--        JNDI –  这个数据源的实现是为了使用如 Spring 或应用服务器这类的容器，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。-->
<!--        initial_context  –  这个属性用来从初始上下文中寻找环境（也就是initialContext.lookup（init ial——context））。这是个可选属性，如果被忽略，那么data_source 属性将 会直接以 init ialContext 为背景再次寻找。-->
<!--        data_source  –  这是引用数据源实例位置的上下文的路径。它会以由 init ial_context查询返回的环境为背景来查找，如果 init ial_context 没有返回结果时，直接以初始上下 文为环境来查找。-->



    </environments>


    <!-- 映射器 加载映射文件 -->
    <mappers>
        <!--通过resource方法一次加载一个映射文件 -->
        <!--注意这里的路径和xml文件
        <mapper resource="mappers/apply.xml" />
         -->

        <!-- package用于指定dao接口所在的包，当指定完成之后就不需要在写mapper以及resource或者class了-->
        <!-- 批量加载mapper 指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载 -->
        <!-- 遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 -->
        <!-- 中上边规范的前提是：使用的是mapper代理方法-->
        <package name="com.gzz.retail.infra.persistence.mapper" />

    </mappers>

</configuration>